// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package http

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HTTPForkJoinServiceClient is the client API for HTTPForkJoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPForkJoinServiceClient interface {
	FanoutFanin(ctx context.Context, in *Request, opts ...grpc.CallOption) (HTTPForkJoinService_FanoutFaninClient, error)
}

type hTTPForkJoinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPForkJoinServiceClient(cc grpc.ClientConnInterface) HTTPForkJoinServiceClient {
	return &hTTPForkJoinServiceClient{cc}
}

func (c *hTTPForkJoinServiceClient) FanoutFanin(ctx context.Context, in *Request, opts ...grpc.CallOption) (HTTPForkJoinService_FanoutFaninClient, error) {
	stream, err := c.cc.NewStream(ctx, &HTTPForkJoinService_ServiceDesc.Streams[0], "/http.HTTPForkJoinService/FanoutFanin", opts...)
	if err != nil {
		return nil, err
	}
	x := &hTTPForkJoinServiceFanoutFaninClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HTTPForkJoinService_FanoutFaninClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type hTTPForkJoinServiceFanoutFaninClient struct {
	grpc.ClientStream
}

func (x *hTTPForkJoinServiceFanoutFaninClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HTTPForkJoinServiceServer is the server API for HTTPForkJoinService service.
// All implementations must embed UnimplementedHTTPForkJoinServiceServer
// for forward compatibility
type HTTPForkJoinServiceServer interface {
	FanoutFanin(*Request, HTTPForkJoinService_FanoutFaninServer) error
	mustEmbedUnimplementedHTTPForkJoinServiceServer()
}

// UnimplementedHTTPForkJoinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHTTPForkJoinServiceServer struct {
}

func (UnimplementedHTTPForkJoinServiceServer) FanoutFanin(*Request, HTTPForkJoinService_FanoutFaninServer) error {
	return status.Errorf(codes.Unimplemented, "method FanoutFanin not implemented")
}
func (UnimplementedHTTPForkJoinServiceServer) mustEmbedUnimplementedHTTPForkJoinServiceServer() {}

// UnsafeHTTPForkJoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPForkJoinServiceServer will
// result in compilation errors.
type UnsafeHTTPForkJoinServiceServer interface {
	mustEmbedUnimplementedHTTPForkJoinServiceServer()
}

func RegisterHTTPForkJoinServiceServer(s grpc.ServiceRegistrar, srv HTTPForkJoinServiceServer) {
	s.RegisterService(&HTTPForkJoinService_ServiceDesc, srv)
}

func _HTTPForkJoinService_FanoutFanin_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HTTPForkJoinServiceServer).FanoutFanin(m, &hTTPForkJoinServiceFanoutFaninServer{stream})
}

type HTTPForkJoinService_FanoutFaninServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type hTTPForkJoinServiceFanoutFaninServer struct {
	grpc.ServerStream
}

func (x *hTTPForkJoinServiceFanoutFaninServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// HTTPForkJoinService_ServiceDesc is the grpc.ServiceDesc for HTTPForkJoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTPForkJoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "http.HTTPForkJoinService",
	HandlerType: (*HTTPForkJoinServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FanoutFanin",
			Handler:       _HTTPForkJoinService_FanoutFanin_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/httpforkjoin.proto",
}
