// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package http

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HTTPForJoinServiceClient is the client API for HTTPForJoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPForJoinServiceClient interface {
	FanoutFanin(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (HTTPForJoinService_FanoutFaninClient, error)
}

type hTTPForJoinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPForJoinServiceClient(cc grpc.ClientConnInterface) HTTPForJoinServiceClient {
	return &hTTPForJoinServiceClient{cc}
}

func (c *hTTPForJoinServiceClient) FanoutFanin(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (HTTPForJoinService_FanoutFaninClient, error) {
	stream, err := c.cc.NewStream(ctx, &HTTPForJoinService_ServiceDesc.Streams[0], "/http.HTTPForJoinService/FanoutFanin", opts...)
	if err != nil {
		return nil, err
	}
	x := &hTTPForJoinServiceFanoutFaninClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HTTPForJoinService_FanoutFaninClient interface {
	Recv() (*HTTPResponse, error)
	grpc.ClientStream
}

type hTTPForJoinServiceFanoutFaninClient struct {
	grpc.ClientStream
}

func (x *hTTPForJoinServiceFanoutFaninClient) Recv() (*HTTPResponse, error) {
	m := new(HTTPResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HTTPForJoinServiceServer is the server API for HTTPForJoinService service.
// All implementations must embed UnimplementedHTTPForJoinServiceServer
// for forward compatibility
type HTTPForJoinServiceServer interface {
	FanoutFanin(*HTTPRequest, HTTPForJoinService_FanoutFaninServer) error
	mustEmbedUnimplementedHTTPForJoinServiceServer()
}

// UnimplementedHTTPForJoinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHTTPForJoinServiceServer struct {
}

func (UnimplementedHTTPForJoinServiceServer) FanoutFanin(*HTTPRequest, HTTPForJoinService_FanoutFaninServer) error {
	return status.Errorf(codes.Unimplemented, "method FanoutFanin not implemented")
}
func (UnimplementedHTTPForJoinServiceServer) mustEmbedUnimplementedHTTPForJoinServiceServer() {}

// UnsafeHTTPForJoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPForJoinServiceServer will
// result in compilation errors.
type UnsafeHTTPForJoinServiceServer interface {
	mustEmbedUnimplementedHTTPForJoinServiceServer()
}

func RegisterHTTPForJoinServiceServer(s grpc.ServiceRegistrar, srv HTTPForJoinServiceServer) {
	s.RegisterService(&HTTPForJoinService_ServiceDesc, srv)
}

func _HTTPForJoinService_FanoutFanin_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HTTPRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HTTPForJoinServiceServer).FanoutFanin(m, &hTTPForJoinServiceFanoutFaninServer{stream})
}

type HTTPForJoinService_FanoutFaninServer interface {
	Send(*HTTPResponse) error
	grpc.ServerStream
}

type hTTPForJoinServiceFanoutFaninServer struct {
	grpc.ServerStream
}

func (x *hTTPForJoinServiceFanoutFaninServer) Send(m *HTTPResponse) error {
	return x.ServerStream.SendMsg(m)
}

// HTTPForJoinService_ServiceDesc is the grpc.ServiceDesc for HTTPForJoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTPForJoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "http.HTTPForJoinService",
	HandlerType: (*HTTPForJoinServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FanoutFanin",
			Handler:       _HTTPForJoinService_FanoutFanin_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/httpforkjoin.proto",
}
